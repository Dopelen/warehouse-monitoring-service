from app.logging_config import setup_logging
import logging
import asyncio
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from sqlalchemy import text
from app.core.config import settings
from app.db.database import get_session_context
from app.kafka.consumer import KafkaConsumer
from app.kafka.producer import KafkaProducer
from app.kafka.utils import wait_for_kafka_ready, create_topic_if_not_exists
from app.api.routes import api_router
from app.db.base import Base
from app.db.database import engine
from app.services.exceptions import InventoryError

setup_logging()
logger = logging.getLogger(__name__)


async def lifespan(app: FastAPI):
    # Startup –ª–æ–≥–∏–∫–∞
    logger.info("üîÑ Application startup in progress...")

    # üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    logger.info("üîÑ Creating tables")
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    logger.info("‚úÖ Database tables created or already exist")

    # üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    logger.info("üîÑ Opening DB session")
    try:
        async with get_session_context() as session:
            await session.execute(text("SELECT 1"))
        logger.info("‚úÖ DB is available")
    except Exception as e:
        logger.error(f"‚ùå DB connection failed: {str(e)}", exc_info=True)
        raise

    # üîß –û–∂–∏–¥–∞–Ω–∏–µ Kafka
    logger.info("üîÑ Waiting for Kafka to become available...")
    await wait_for_kafka_ready()

    # üîß –°–æ–∑–¥–∞–Ω–∏–µ Kafka-—Ç–æ–ø–∏–∫–∞
    logger.info(f"üîÑ Ensuring Kafka topic '{settings.KAFKA_TOPIC}' exists...")
    await create_topic_if_not_exists()

    # üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka Producer
    kafka_producer = KafkaProducer()
    await kafka_producer.start()
    app.state.kafka_producer = kafka_producer

    # üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka Consumer
    kafka_consumer = KafkaConsumer()
    await kafka_consumer.start()
    app.state.kafka_consumer = kafka_consumer

    # –ó–∞–ø—É—Å–∫–∞–µ–º consumer –≤ —Ñ–æ–Ω–µ
    consumer_task = asyncio.create_task(kafka_consumer.consume())
    app.state.kafka_consumer_task = consumer_task

    yield

    logger.info("üîÑ Application shutdown in progress...")

    # üîß –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka Consumer
    if hasattr(app.state, 'kafka_consumer_task'):
        app.state.kafka_consumer_task.cancel()
        try:
            await app.state.kafka_consumer_task
        except asyncio.CancelledError:
            pass

    if hasattr(app.state, 'kafka_consumer'):
        await app.state.kafka_consumer.stop()

    # üîß –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka Producer
    if hasattr(app.state, 'kafka_producer'):
        await app.state.kafka_producer.stop()


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifespan –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
app = FastAPI(
    title=settings.PROJECT_NAME,
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ω–∏—Ö",
    version="1.0.0",
    lifespan=lifespan
)

@app.exception_handler(InventoryError)
async def inventory_error_handler(request: Request, exc: InventoryError):
    return JSONResponse(
        status_code=400,
        content={"detail": exc.message},
    )

app.include_router(api_router, prefix="/api")